# All lines starting with "#" will be ignored by DFDone. You can actually use other symbols too.

> Including Other Model Files
============================

# To include entities defined in other files,
# you can specify their path relative to a common parent directory:
Include "examples/sample_threats.tml"
# Now, all components and aliases defined in sample_threats.tml are available here.


> Diagram Elements
==================

# Diagram elements can be white/black/grey-box and agent/service/storage:
"User" is a black-box agent
"Web App" is a white-box service
"DB" is a white-box storage


> Data
======

# Data can be public, restricted or confidential:
"un" is public data
"pw" is confidential data
"session cookie" is restricted data

# Optional aliasing/grouping has no effect on the diagram;
# it simply allows for shortcuts in this file.
"backend" is "Web App", "DB"
"creds" are "un", "pw"


> Threats
=========

# See examples/sample_threats.tml.


> Security Measures
===================

# Security measures can be full/partial/detective,
# and can apply to one or many threats, or threat groups:
"Input Validation" is a full measure against "injection"
    described as "<a href=""https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"">Click for more info</a>"
"Parameterized Queries" are a full measure against "sqli"
"Blocking WAF" is a partial measure against "injection" described as "WAF in blocking mode"
"Learning WAF" is a detective measure against "injection" described as "WAF in learning mode"
"Error Handling" is a partial measure against "Information Disclosure"

# Once again, optional alias has no effect on the diagram:
"inpval" is "Input Validation"


> Diagram Interactions
======================

# Diagram interactions can be send/receive/process/store.
# Threats can apply to specific data or the entire interaction.
# Refer to sample_threats.tml for threat details.

# Specific threats applied to specific data:
"User" sends "un", "pw" to "Web App".
"Web App" sends "creds" to "DB".
"User" receives "session cookie" from "Web App".


> Security Risks
================

# Risks are threats applied to interactions.
#
# TODO lack of tls and improper error handling as overarching threats,
# with their own mitigations
# TODO better docs here, probably copy from mitigations

"xss" applies to "un" between "User" and "Web App".
"cmdi" applies to "pw" between "User" and "Web App".
"sqli" applies to all data between "Web App" and "DB".
"Information Disclosure" applies to all data between "Web App" and "User".

> Security Mitigations
======================

# Mitigations are security measures applied to interactions.

# Keywords:
# must - results in bold formatting
# should - results in italics formatting
# may - no formatting change

# Mitigations can apply to all or specific data between pairs of elements.
# They will only reduce the likelihood (not severity) of affected threats,
# and only when they have been marked as verified; e.g.:
# "mitigation" has been verified on...

"inpval" must be implemented on all data between "User" and "Web App".
"Parameterized Queries" must be implemented on all data between "Web App" and "DB".
# Maybe the WAF is only good for XSS, and is already in place but we should double-check:
"Blocking WAF" must be verified on "un" between "User" and "Web App".
# Even less of a requirement; would be nice to see if the WAF works for server-side injection:
"Learning WAF" may be implemented on "pw" between "User" and "Web App".
"Error Handling" must be implemented on all data between "User" and "Web App".

